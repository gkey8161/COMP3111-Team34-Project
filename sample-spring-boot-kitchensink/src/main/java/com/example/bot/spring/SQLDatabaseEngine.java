package com.example.bot.spring;

import lombok.extern.slf4j.Slf4j;
import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import java.sql.*;
import java.util.List;
import java.net.URISyntaxException;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.util.Date;
import java.util.Calendar;
import java.util.*;
import java.util.Random;

//@Slf4j



/**
 * The SQLDatabaseEngine implements functions that
 * communicate with the database and get/update the related data.
 * 
 * @author Grp34
 * @version 1.0
 * @since  2017-11-01
 */
public class SQLDatabaseEngine extends DatabaseEngine{	
	
/**
 * This method is used to create new user info in our database.
 * Data stored will be needed in order for other functions to work.
 * The data is bound to the userID, which is unique for each user.
 * Return statement for new user and users that have previously used
 * the chatbot will be slightly different.
 * 
 * @param userId This is the unique user ID generated by Line
 * @return String This returns the result of the initialization
 * @exception SQLException If userID already exist in user_info table
 */
	public String InitializeNewUser(String userId) throws Exception {
		String result = null;
		int user_count = 0;
		boolean data_exist = false;
		int today = 0;
		Calendar c = Calendar.getInstance();
		//Date d = c.getTime();
		//c.setTime(d);
		today = c.get(Calendar.DAY_OF_YEAR);
		Connection connection = getConnection();
		
		//Create data in user_info
		PreparedStatement stmt1 = connection.prepareStatement("INSERT INTO user_info VALUES (? , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'nothing', 'nothing', '0', 0, 0, 'default', ?)");
		stmt1.setString(1, userId);
		stmt1.setInt(2,today);
		stmt1.executeUpdate();

		
		// Add data to coupontable
		PreparedStatement stmt2 = connection.prepareStatement("SELECT user_number from coupontable where user_id = 'master'");
		ResultSet rs = stmt2.executeQuery();
		if (rs.next()) {
		user_count = rs.getInt(1);
		}


		PreparedStatement stmt3 = connection.prepareStatement("SELECT * from coupontable where user_id = ?");
		stmt3.setString(1, userId);
		ResultSet rs2 = stmt3.executeQuery();
		if (rs2.next()) {
			data_exist = true;
		}
		if(!data_exist)
		{
		user_count++;
		PreparedStatement stmt4 = connection.prepareStatement("INSERT INTO coupontable VALUES (? , ?, false, 0)");
		stmt4.setString(1, userId);
		stmt4.setInt(2, user_count);
		stmt4.executeUpdate();
		
		//Update master user_count
		PreparedStatement stmt5 = connection.prepareStatement("UPDATE coupontable set user_number = ? where user_id = 'master'");
		stmt5.setInt(1, user_count);
		stmt5.executeUpdate();
		result = "Data initiallized! Welcome~";
		return result;
		}
		
		connection.close();
		result = "Data re-created! Unfortunately you are not a new user so you are not qualified for our new user event";
		return result;
	}
	
	/**
	* This method is used to delete user info in our database.
	* Data stored will be deleted from database.
	* The data is bound to the userID, which is unique for each user.
	* Return acknowledge message to the user.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns the result of the deletion.
	* @exception SQLException If userID does not exist in database.
	*/
	public String RemoveUser(String userId) throws Exception {
		String result = null;
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement("DELETE FROM user_info WHERE user_id= ?");
		stmt.setString(1, userId);
		stmt.executeUpdate();
		connection.close();	
		result = "Data Deleted sucessfully!";
		return result;
	}
	
	/**
	* This method is used to get info state in our database for a particular user.
	* Info state is used to determine which information user will be setting the next time they input. 
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns the current state.
	* @exception SQLException If errors occured in database.
	*/
	public String getInfoState(String userId) throws Exception { 
		String state = "default";
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement("SELECT info_state FROM user_info WHERE user_id = ?");
		stmt.setString(1, userId);
		ResultSet rs = stmt.executeQuery();
		if(rs.next()) {
			state = rs.getString(1);
			connection.close();
			return state;
		}else {
			connection.close();
			return state;
		}
	}
	
	/**
	* This method is used to set info state in our database for a particular user.
	* Info state is used to determine which information user will be setting the next time they input. 
	* @param text This will be the next info_state of the user
	* @param userId This is the unique user ID generated by Line.
	* @exception SQLException If errors occured in database.
	*/
	public void setInfoState(String text, String userId) throws Exception{
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement("UPDATE user_info set info_state = ? where user_id = ?");
		stmt.setString(1, text);
		stmt.setString(2, userId);
		stmt.executeUpdate();
		connection.close();
		return;
	}
	
	/**
	* This method is used to set weight (in kg) in our database for a particular user. 
	* @param text This is the input passed by user.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns whether the input is valid and if the weight value has been updated.
	* @exception SQLException If errors occured in database.
	* @exception IOException If text entered is not a number.
	*/
	public String weight(String text, String userId) throws Exception {
		//Write your code here
		int weight = 0;
		String result = null;
		String[] items;
		items = text.split("\\r?\\n");
		boolean data_exists = false;
		/*if(items[0] == "weight") {
			weight = Integer.parseInt(items[1]);
		}else {
			weight = Integer.parseInt(items[0]);
		}*/
		weight = Integer.parseInt(items[0]);
		if(weight<=0)
		{
			result = "Weight can not be zero or negative! Please use the info function again and enter a valid input";
			return result;
		}
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement("SELECT * FROM user_info WHERE user_id = ?");
		stmt.setString(1, userId);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			data_exists = true;
		}
		rs.close();
		if(data_exists)
		{
			PreparedStatement stmt2 = connection.prepareStatement("UPDATE user_info set weight = ? where user_id = ?");
			stmt2.setInt(1, weight);
			stmt2.setString(2, userId);
			stmt2.executeUpdate();
			connection.close();
			result = "Data updated! Your weight has been set to " + weight + "kg";
		}
			return result;
		
	}
	
	/**
	* This method is used to set height (in cm) in our database for a particular user.
	* @param text This is the input passed by user.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns whether the input is valid and if the height value has been updated.
	* @exception IOException If text entered is not a number.
	*/
	public String height(String text, String userId) throws Exception {
		//Write your code here
		int height = 0;
		String result = null;
		String[] items;
		items = text.split("\\r?\\n");
		boolean data_exists = false;
		height = Integer.parseInt(items[0]);
		if(height<=0)
		{
			result = "Height can not be zero or negative! Please use the info function again and enter a valid input";
			return result;
		}
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement("SELECT * FROM user_info WHERE user_id = ?");
		stmt.setString(1, userId);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			data_exists = true;
		}
		rs.close();
		if(data_exists)
		{
			PreparedStatement stmt2 = connection.prepareStatement("UPDATE user_info set height = ? where user_id = ?");
			stmt2.setInt(1, height);
			stmt2.setString(2, userId);
			stmt2.executeUpdate();
			connection.close();
			result = "Data updated! Your height has been set to " + height + "cm";
		}
			return result;
		
	}
	
	/**
	* This method is used to set age in our database for a particular user.
	* @param text This is the input passed by user.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns whether the input is valid and if the age value has been updated.
	* @exception IOException If text entered is not a number.
	*/
	public String age(String text, String userId) throws Exception {
		//Write your code here
		int age = 0;
		String result = null;
		String[] items;
		items = text.split("\\r?\\n");
		boolean data_exists = false;
		age = Integer.parseInt(items[0]);
		if(age<=0)
		{
			result = "Age can not be zero or negative! Please use the info function again and enter a valid input";
			return result;
		}
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement("SELECT * FROM user_info WHERE user_id = ?");
		stmt.setString(1, userId);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			data_exists = true;
		}
		rs.close();
		if(data_exists)
		{
			PreparedStatement stmt2 = connection.prepareStatement("UPDATE user_info set age = ? where user_id = ?");
			stmt2.setInt(1, age);
			stmt2.setString(2, userId);
			stmt2.executeUpdate();
			connection.close();
			result = "Data updated! Your age has been set to " + age;
		}
			return result;
		
	}
	
	/**
	* This method is used to set gender in our database for a particular user.
	* @param text This is the input passed by user.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns whether the input is valid and if the gender value has been updated.
	* @exception SQLException If error happened in database.
	*/
	public String sex(String text, String userId) throws Exception {
		String result = null;
		boolean data_exists = false;
		if(text.equals("M") || text.equals("F"))
		{
			Connection connection = getConnection();
			PreparedStatement stmt = connection.prepareStatement("SELECT * FROM user_info WHERE user_id = ?");
			stmt.setString(1, userId);
			ResultSet rs = stmt.executeQuery();
			if (rs.next()) {
				data_exists = true;
			}
			rs.close();
			if(data_exists)
			{
				PreparedStatement stmt2 = connection.prepareStatement("UPDATE user_info set sex = ? where user_id = ?");
				stmt2.setString(1, text);
				stmt2.setString(2, userId);
				stmt2.executeUpdate();
				connection.close();
				result = "Data updated! Your sex has been set to " + text;
			}
				return result;
		}
		else {
			result = "Your Sex is invalid! Please try again using the info function.";
			return result;
					
		}
	}
	
	/**
	* This method is used to set water interval (in mins) in our database for a particular user.
	* Value set by this function will be used to determine whether a remind message to be generated.
	* @param text This is the input passed by user.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns whether the input is valid and if the water_interval value has been updated.
	* @exception IOException If text entered is not a number.
	* @exception SQLException If error in database.
	*/
	public String waterInterval(String text, String userId) throws Exception {
		String result = null;
		String[] items;
		items = text.split("\\r?\\n");
		boolean data_exists = false;
		int interval = Integer.parseInt(items[1]) * 60000;
		if(interval<0)
		{
			result ="Interval can't be negative!";
			return result;
		}
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement("SELECT * FROM user_info WHERE user_id = ?");
		stmt.setString(1, userId);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			data_exists = true;
		}
		rs.close();
		if(data_exists)
		{
			PreparedStatement stmt2 = connection.prepareStatement("UPDATE user_info set water_int = ? where user_id = ?");
			stmt2.setInt(1, interval);
			stmt2.setString(2, userId);
			stmt2.executeUpdate();
			connection.close();
			result = "Data updated! ";
			return result;
		}
		else
		{
			result = "Account not exist!\n Please create an account first.";
			return result;
		}

	}
	
	/**
	* This method is used to determine whether it is time for us to remind a particular user to drink water.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns the reminder message if the time has come.
	* @exception SQLException If error in database.
	*/
	public String waterNotif(String userId) throws Exception {
		String results = "";
		
		try {
			Date curDT = new Date();
			Connection connection = getConnection();
			PreparedStatement stmt = connection.prepareStatement("SELECT water_time, water_int FROM user_info WHERE user_id = ?");
			stmt.setString(1, userId);
			ResultSet rs = stmt.executeQuery();
			if (rs.next()) {
				long old_time = rs.getLong("water_time");
				if (rs.getLong("water_int") <= 0) {
					rs.close();
					stmt.close();
					connection.close();
					return results;
				} else if (old_time == 0) {
					PreparedStatement stmtSave = connection.prepareStatement("UPDATE user_info SET water_time = ? WHERE user_id = ?");
					stmtSave.setLong(1, curDT.getTime());
					stmtSave.setString(2, userId);
					stmtSave.executeUpdate();
					stmtSave.close();
				}
				else if (curDT.getTime() > (old_time + rs.getLong("water_int"))) {
					results = "Remember to drink some water!";
					PreparedStatement stmtSave = connection.prepareStatement("UPDATE user_info SET water_time = ? WHERE user_id = ?");
					stmtSave.setLong(1, curDT.getTime());
					stmtSave.setString(2, userId);
					stmtSave.executeUpdate();
					stmtSave.close();
				}
			}
			rs.close();
			stmt.close();
			connection.close();
		} catch(Exception e) {
			System.out.println(e);
		}
		return results;
	}
	
	/**
	* This method is used to search for nutrient info for a menu/meal.
	* Nutrient info includes weight, energy, sodium, and fat.
	* @param text This is the input passed by user.
	* @return String This returns the nutrients for the input.
	* @exception IOException If input is invalid.
	* @exception SQLException If error in database.
	*/
	public String menu_search(String text) throws Exception {
		String result_set;
		String[] dishes;
		dishes = text.split("\\r?\\n");
		StringBuilder resultbuilder = new StringBuilder();
		try {	
				for(int i=1; i < dishes.length;i++) {
					String[] ingredients = {};
					ingredients = dishes[i].split(" ");
					int weight_total = 0;
					int energy_total = 0;
					int sodium_total = 0;
					int fat_total = 0;
					for(int j=0; j < ingredients.length; j++)
					{
						int weight_avg = 0;
						int energy_avg = 0;
						int sodium_avg = 0;
						int fat_avg = 0;
						int result_count = 0;
						Connection connection = getConnection();
						PreparedStatement stmt = connection.prepareStatement("SELECT * FROM nutrient_table WHERE description like concat( ?, '%')");
						stmt.setString(1, ingredients[j]);
						ResultSet rs = stmt.executeQuery();
						while (rs.next()) {
							result_count++;
							weight_avg += rs.getInt(3);
							energy_avg += rs.getInt(5);
							sodium_avg += rs.getInt(6);
							fat_avg += rs.getInt(7);
							//resultbuilder.append(rs.g(2));
						}
						
						if (result_count>0)
						{
						weight_avg = weight_avg / result_count;
						energy_avg = energy_avg / result_count;
						sodium_avg = sodium_avg / result_count;
						fat_avg = fat_avg / result_count;
						
						weight_total += weight_avg;
						energy_total += energy_avg;
						sodium_total += sodium_avg;
						fat_total += fat_avg;
						
						//resultbuilder.append(ingredients[j] + ": \n Average Weight = " + weight_avg + " (g) \n Average Energy = " + energy_avg + " (kcal) \n Average Sodium = " + sodium_avg + " (g) \n Saturated Fat = " + fat_avg + " (g) \n \n");
						}
						rs.close();
						stmt.close();
						connection.close();
						}
						resultbuilder.append(dishes[i] + ":\nWeight = " + weight_total + " (g)\nEnergy = " + energy_total + " (kcal)\nSodium = " + sodium_total + " (mg)\nFatty Acids = " + fat_total + " (g)");
						if(i!=(dishes.length-1)) {
							resultbuilder.append("\n\n");
						}
							
			}			
		}catch(Exception e){
			System.out.println(e);
		}
		result_set = resultbuilder.toString();
		return result_set;
	}
	
	/**
	* This method is used to record nutrient info in our database for a particular user.
	* @param text This is the input passed by user which indicates what they ate.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns the nutrient info of the meal and signals user if the intake is too high.
	* @exception IOException If input is invalid.
	* @exception SQLException If error in database.
	*/
	public String eat(String text, String userId) throws Exception {
		String result_set;
		String[] dishes;
		dishes = text.split("\\r?\\n");
		StringBuilder resultbuilder = new StringBuilder();
		try {	
			int eat_weight_total = 0;
			int eat_energy_total = 0;
			int eat_sodium_total = 0;
			int eat_fat_total = 0;
			for(int i=1; i < dishes.length;i++) {
				String[] ingredients = {};
				ingredients = dishes[i].split(" ");
				int weight_total = 0;
				int energy_total = 0;
				int sodium_total = 0;
				int fat_total = 0;
				for(int j=0; j < ingredients.length; j++)
				{
					int weight_avg = 0;
					int energy_avg = 0;
					int sodium_avg = 0;
					int fat_avg = 0;
					int result_count = 0;
					Connection connection = getConnection();
					PreparedStatement stmt = connection.prepareStatement("SELECT * FROM nutrient_table WHERE description like concat( ?, '%')");
					stmt.setString(1, ingredients[j]);
					ResultSet rs = stmt.executeQuery();
					while (rs.next()) {
						result_count++;
						weight_avg += rs.getInt(3);
						energy_avg += rs.getInt(5);
						sodium_avg += rs.getInt(6);
						fat_avg += rs.getInt(7);
						//resultbuilder.append(rs.g(2));
					}
					
					if (result_count>0)
					{
						weight_avg = weight_avg / result_count;
						energy_avg = energy_avg / result_count;
						sodium_avg = sodium_avg / result_count;
						fat_avg = fat_avg / result_count;
						
						weight_total += weight_avg;
						energy_total += energy_avg;
						sodium_total += sodium_avg;
						fat_total += fat_avg;
						
						eat_weight_total += weight_avg;
						eat_energy_total += energy_avg;
						eat_sodium_total += sodium_avg;
						eat_fat_total += fat_avg;
						
						//resultbuilder.append(ingredients[j] + ": \n Average Weight = " + weight_avg + " (g) \n Average Energy = " + energy_avg + " (kcal) \n Average Sodium = " + sodium_avg + " (g) \n Saturated Fat = " + fat_avg + " (g) \n \n");
					}
					
					rs.close();
				}
				resultbuilder.append(dishes[i] + ":\nWeight = " + weight_total + " (g)\nEnergy = " + energy_total + " (kcal)\nSodium = " + sodium_total + " (mg)\nFatty Acids = " + fat_total + " (g)\n\n");
				result_set = resultbuilder.toString();
				
			}
			boolean data_exists = false;
			Connection connection = getConnection();
			PreparedStatement stmt2 = connection.prepareStatement("SELECT * FROM user_info WHERE user_id = ?");
			stmt2.setString(1, userId);
			ResultSet rs2 = stmt2.executeQuery();
			if (rs2.next()) {
				data_exists = true;
			}
			rs2.close();
			if(data_exists){
				System.out.println("Recording Data");
				Calendar c = Calendar.getInstance();
				int day_of_year = c.get(Calendar.DAY_OF_YEAR);
				System.out.println(day_of_year);
				int temp_day = 0;
				
				PreparedStatement stmt3 = connection.prepareStatement("SELECT today FROM user_info WHERE user_id = ?");
				stmt3.setString(1, userId);
				ResultSet rs3 = stmt3.executeQuery();
				if (rs3.next()) {
					temp_day = rs3.getInt(1);
				}
				
				System.out.println(eat_energy_total);
				System.out.println(eat_sodium_total);
				System.out.println(eat_fat_total);
				
				if(day_of_year == temp_day) {
					int day_of_week = c.get(Calendar.DAY_OF_WEEK);
					System.out.println("Same day");
					System.out.println(day_of_week);
					PreparedStatement stmt4 = connection.prepareStatement("UPDATE user_info set energy_" + day_of_week + " = energy_" + day_of_week + " + ? where user_id = ?");
					stmt4.setInt(1, eat_energy_total);
					stmt4.setString(2, userId);
					stmt4.executeUpdate();
					
					PreparedStatement stmt5 = connection.prepareStatement("UPDATE user_info set sodium = sodium + ? where user_id = ?");
					stmt5.setInt(1, eat_sodium_total);
					stmt5.setString(2, userId);
					stmt5.executeUpdate();
					
					PreparedStatement stmt6 = connection.prepareStatement("UPDATE user_info set fatty_acid = fatty_acid + ? where user_id = ?");
					stmt6.setInt(1, eat_fat_total);
					stmt6.setString(2, userId);
					stmt6.executeUpdate();
				}else {
					int day_of_week = c.get(Calendar.DAY_OF_WEEK);
					System.out.println("New day");
					System.out.println(day_of_week);
					PreparedStatement stmt4 = connection.prepareStatement("UPDATE user_info set energy_" + day_of_week + " = ? where user_id = ?");
					stmt4.setInt(1, eat_energy_total);
					stmt4.setString(2, userId);
					stmt4.executeUpdate();
					
					PreparedStatement stmt5 = connection.prepareStatement("UPDATE user_info set sodium = ? where user_id = ?");
					stmt5.setInt(1, eat_sodium_total);
					stmt5.setString(2, userId);
					stmt5.executeUpdate();
					
					PreparedStatement stmt6 = connection.prepareStatement("UPDATE user_info set fatty_acid = ? where user_id = ?");
					stmt6.setInt(1, eat_fat_total);
					stmt6.setString(2, userId);
					stmt6.executeUpdate();
					
					PreparedStatement stmt7 = connection.prepareStatement("UPDATE user_info set today = ? where user_id = ?");
					stmt7.setInt(1, day_of_year);
					stmt7.setString(2, userId);
					stmt7.executeUpdate();
				}
			
				
				connection.close();
				resultbuilder.append("Data is recorded!");
			}
		}catch(Exception e){
			System.out.println(e);
		}
		System.out.println("Call warning()");
		String warning_message = warning(userId);
		resultbuilder.append(warning_message);
		System.out.println(warning_message);
		result_set = resultbuilder.toString();
		return result_set;
	}
	
	/**
	* This method is used to determine whether the intake of a particular user is too high.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns the warning message if the intake is too high.
	* @exception SQLException If error in database.
	*/
	public String warning(String userId) throws Exception{
		String result;
		StringBuilder resultbuilder = new StringBuilder();
		double energy_requirement = 0;
		
		int sodium = 0;
		int fat = 0;
		int total_energy = 0;
		int energy_1 = 0;
		int energy_2 = 0;
		int energy_3 = 0;
		int energy_4 = 0;
		int energy_5 = 0;
		int energy_6 = 0;
		int energy_7 = 0;
		
		String sex;
		int age = 0;
		int weight = 0;
		int height = 0;
		
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement("SELECT energy_1, energy_2, energy_3, energy_4, energy_5, energy_6, energy_7, sodium, fatty_acid, sex, age, weight, height FROM user_info WHERE user_id = ?");
		stmt.setString(1, userId);
		ResultSet rs = stmt.executeQuery();
		if(rs.next()) {
			energy_1 = rs.getInt(1);
			energy_2 = rs.getInt(2);
			energy_3 = rs.getInt(3);
			energy_4 = rs.getInt(4);
			energy_5 = rs.getInt(5);
			energy_6 = rs.getInt(6);
			energy_7 = rs.getInt(7);
			sodium = rs.getInt(8);
			fat = rs.getInt(9);
			sex = rs.getString(10);
			age = rs.getInt(11);
			weight = rs.getInt(12);
			height = rs.getInt(13);
			total_energy = energy_1 + energy_2 + energy_3 + energy_4 + energy_5 + energy_6 + energy_7;
			System.out.println(total_energy);
			
			
			if(sex.equals("F")) {
				energy_requirement = ((655 + (9.6 * weight) + (1.8 * height) - (4.7 * age)) * 10.85);
				System.out.println(energy_requirement);
			}else if(sex.equals("M")) {
				energy_requirement = ((66 + (13.7 * weight) + (5 * height) - (6.8 * age)) * 10.85);
				System.out.println(energy_requirement);
			}else {
				return "\nUser info is invalid. Please use 'info' function again and ensure that all your info is properly set";
			}
			
			if(total_energy >= energy_requirement) {
				resultbuilder.append("\n\nWeekly Energy intake has EXCEED LIMIT!");
			}
			if(fat >= 44) {
				resultbuilder.append("\n\nDaily Fat intake has EXCEED LIMIT!");
			}
			if(sodium >= 3000) {
				resultbuilder.append("\n\nDaily Sodium intake has EXCEED LIMIT!");
			}
		}
		
		
		result = resultbuilder.toString();
		return result;
	}
	
	/**
	* This method is used to calculate time required to burn calories for a particular user.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns the time required for different sports intensity.
	* @exception SQLException If error in database.
	*/
	public String sports_amount(String userId) throws Exception {
		//Write your code here
		String result = null;
		float weight = 0;
		int energy = 0;
		int light_multiplier = 1;
		int medium_multiplier = 4;
		int heavy_multiplier = 8;
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement("SELECT * FROM user_info WHERE user_id = ?");
		stmt.setString(1, userId);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			weight = rs.getInt(2);
			energy = rs.getInt(3) + rs.getInt(4) + rs.getInt(5) + rs.getInt(6) + rs.getInt(7) + rs.getInt(8) + rs.getInt(9); 			
		}
		rs.close();
		if(weight>0)
		{
			result = "Total energy intake(for the last 7 days) is : " + energy + " kcal.\nyour weight is : " + weight + "kg.\n\nTime required to consume:\nLight(e.g. walking) : " + energy/(weight*light_multiplier) + " hr\nMedium(e.g. jogging) : " + energy/(weight*medium_multiplier) + " hr\nHeavy(e.g. running, swimming) : " + energy/(weight*heavy_multiplier) + " hr\n"  ;
			return result;
		}
		else
		{
			result = "Your Weight is invalid! Please set your weight first";
			return result;
		}

	}
	
	/**
	* This method is used to manually input energy taken on a day for a particular user.
	* @param text This is the input passed by user which indicates energy the took.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns whether the info is recorded to database successfully.
	* @exception IOException If input is invalid (e.g. not entering number).
	* @exception SQLException If error in database.
	*/ 
	public String energy(String text, String userId) throws Exception {
		//Write your code here
		String result = null;
		String[] items = new String[4];
		int weekday_time = 0;
		items = text.split("\\r?\\n");
		boolean data_exists = false;
		int energy = Integer.parseInt(items[1]);
		System.out.println("Test:Set energy");
		System.out.println(items[2]);
		
		switch(items[2].toLowerCase()) {
			case "sun":{
				weekday_time = 1;
				break;
			}
			case "mon":{
				weekday_time = 2;
				break;
			}
			case "tue":{
				weekday_time = 3;
				break;
			}
			case "wed":{
				weekday_time = 4;
				break;
			}
			case "thu":{
				weekday_time = 5;
				break;
			}
			case "fri":{
				weekday_time = 6;
				break;
			}
			case "sat":{
				weekday_time = 7;
				break;
			}
			default:{
				Calendar c = Calendar.getInstance();
				//Date d = c.getTime();
				//c.setTime(d);
				weekday_time = c.get(Calendar.DAY_OF_WEEK);
				System.out.println("Test: " + weekday_time);
			}
		}
		System.out.println(weekday_time);
		System.out.println(userId);
		
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement("SELECT * FROM user_info WHERE user_id = ?");
		stmt.setString(1, userId);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			data_exists = true;
			System.out.println("Test: User ID Exist");
		}else {
			System.out.println("Test: User ID not Exist");
		}
		rs.close();
		if(data_exists)
		{
			String sql = "UPDATE user_info set energy_" + weekday_time + " = ? where user_id = ?";
			PreparedStatement stmt2;
			stmt2 = connection.prepareStatement(sql);
			stmt2.setInt(1, energy);
			stmt2.setString(2, userId);
			stmt2.executeUpdate();
			connection.close();
			result = "Data updated!";
			return result;
		}
		else
		{
			String sql = "INSERT INTO user_info VALUES (? , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); UPDATE user_info set energy_" + weekday_time + " = ? where user_id = ?";
			PreparedStatement stmt3;
			stmt3 = connection.prepareStatement(sql);
			stmt3.setString(1, userId);
			stmt3.setInt(2, energy);
			stmt3.setString(3, userId);
			stmt3.executeUpdate();
			connection.close();
			result = "Data added to our database!";
			return result;
		}

	}
	
	/**
	* This method is used to obtain the unique 6-digit code for a particular user.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns the code of the user.
	* @exception SQLException If error in database.
	*/
	public String friend(String userId) throws Exception {
		//Write your code here
		String result = null;
		int user_id = 0;
		
		boolean data_exists = false;
		
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement("SELECT user_number from coupontable where user_id = ?");
		stmt.setString(1, userId);
		ResultSet rs = stmt.executeQuery();
		
		if (rs.next()) {
			user_id = rs.getInt(1);
			result = Integer.toString(user_id);
			for(int i = result.length(); i < 6; i++) {
				result = "0" + result;
			}
			connection.close();
			return result;
		}else {
			result = "You are not qualified for this event! This event is only for new users.";
			connection.close();
			return result;
		}
	}
	
	/**
	* This method is used when user refer their friends by entering their code.
	* @param text This is the input passed by user which indicates the user that invited them.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns if the referral is valid and if coupon has been given to them.
	* @exception IOException If input is invalid (i.e. not entering a number).
	* @exception SQLException If error in database.
	*/
	public String code(String text, String userId) throws Exception {
		
		String result = null;
		String[] items;
		items = text.split("\\r?\\n");
		int user_id = Integer.parseInt(items[1]);
		if(items[1].length()!=6)
		{
			result = "Don't miss the zero(s)! Please try again.";
			return result;
		}
		
		boolean data_exists = false;
		boolean code = true;
		int coupon_count = 0;
		
		Connection connection = getConnection();
		
		PreparedStatement stmt = connection.prepareStatement("SELECT user_number FROM coupontable where user_id = ?");
		stmt.setString(1, userId);
		ResultSet check_your_id = stmt.executeQuery();
		if(check_your_id.next())
		{
			if (check_your_id.getInt(1) == user_id)
			{
				result = "Hey! You can not refer yourself!";
				return result;
			}
		}
		
		PreparedStatement stmt1 = connection.prepareStatement("SELECT * FROM coupontable where user_number = ? and user_id not like 'master'");
		stmt1.setInt(1, user_id);
		ResultSet rs = stmt1.executeQuery();
		if (rs.next()) {
			data_exists = true;
		}
		PreparedStatement stmt2 = connection.prepareStatement("SELECT code FROM coupontable where user_id = ?");
		stmt2.setString(1, userId);
		ResultSet rs2 = stmt2.executeQuery();
		if (rs2.next()) {
			code = rs2.getBoolean(1);
			System.out.println("code false");
		}
		PreparedStatement stmt7 = connection.prepareStatement("SELECT coupon_count FROM coupontable where user_id = 'master'");
		ResultSet rs3 = stmt7.executeQuery();
		if (rs3.next()) {
			coupon_count = rs3.getInt(1);
		}
		
		if(!code && data_exists && coupon_count < 5000) {
			System.out.println("Updating");
			PreparedStatement stmt3 = connection.prepareStatement("UPDATE coupontable set code = true where user_id = ?");
			stmt3.setString(1, userId);
			stmt3.executeUpdate();
			
			PreparedStatement stmt4 = connection.prepareStatement("UPDATE coupontable set coupon_count = coupon_count + 1 where user_id = ?");
			stmt4.setString(1, userId);
			stmt4.executeUpdate();
			
			PreparedStatement stmt5 = connection.prepareStatement("UPDATE coupontable set coupon_count = coupon_count + 1 where user_number = ? and user_id not like 'master'");
			stmt5.setInt(1, user_id);
			stmt5.executeUpdate();
			
			PreparedStatement stmt6 = connection.prepareStatement("UPDATE coupontable set coupon_count = coupon_count + 2 where user_id = 'master'");
			stmt6.executeUpdate();
		
			result = "Both you and your friend has got a coupon! You may redeem it using 'redeem'.";
			connection.close();
			return result;
		}else if(!data_exists){
			result = "There is no user associated with the code! Please ask your friend and get the correct one.";
			connection.close();
			return result;
		}else if(coupon_count >= 5000){
			result = "Sorry, the event has ended and all the coupons has been given out.";
			connection.close();
			return result;
		}else{
			result = "You are not qualified for this event! Either you are not a new user or you have already referred your friend.";
			connection.close();
			return result;
		}
	}
	
	/**
	* This method is used when user try to redeem a coupon.
	* @param userId This is the unique user ID generated by Line.
	* @return String This returns if the redeem is good and if they still have any coupons left.
	* @exception SQLException If error in database.
	*/
	public String redeem(String userId) throws Exception {
		//Write your code here
		String result = null;
		int coupon_count = 0;
		boolean data_exists = false;
		
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement("SELECT coupon_count FROM coupontable where user_id = ?");
		stmt.setString(1, userId);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			coupon_count = rs.getInt(1);
		}
		if(coupon_count > 0) {
			PreparedStatement stmt2 = connection.prepareStatement("UPDATE coupontable set coupon_count = coupon_count - 1 where user_id = ?");
			stmt2.setString(1, userId);
			stmt2.executeUpdate();
			result = "You redeemed one coupon\nYou still have " + --coupon_count + " coupon(s) to be redeemed.";
			connection.close();
			return result;
		}else {
			result = "You currently have no coupon";
			connection.close();
			return result;
		}
		
	}
	/**
	* This method is used to initialize test data.
	* @param sqlstatement This is the SQL Statement passed to guranteen test data is in good condition.
	* @exception SQLException If error in database.
	*/
	public void InitiallizeTestData(String sqlstatement) throws Exception {
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement(sqlstatement);
		stmt.executeUpdate();
		connection.close();	
	}
	
	/**
	* This method is used to get the current total coupon number for a testcase.
	* This is specifically needed for testing if the handling is correct when coupon is greater than 5000.
	* The value will be saved by a variable and set the value again when the testcase is finished.
	* @param sqlstatement This is the SQL Statement passed to guranteen test data is in good condition.
	* @return the current total number of coupon given out
	* @exception SQLException If error in database.
	*/
	public int GetCouponCount(String sqlstatement) throws Exception {
		int result = 0;
		Connection connection = getConnection();
		PreparedStatement stmt = connection.prepareStatement(sqlstatement);
		ResultSet rs = stmt.executeQuery();
		if(rs.next())
		{
			result = rs.getInt(1);
		}
		connection.close();
		return result;
	}
	
	/**
	* This method is used to give recommendation for user.
	* Recommendation includes meal time and meal type.
	* @param userID This is the user ID for the user generated by Line.
	* @param decision A number which decides which option.
	* @return String This returns the next steps/result of the feature.
	* @exception IOException If input is invalid.
	* @exception SQLException If error in database.
	*/
	public String order(String userID, String decision) throws Exception {			
		try {
		Connection connection = getConnection();
		//find state
		PreparedStatement find_state = connection.prepareStatement("SELECT state FROM user_info where user_id = ?");
		find_state.setString(1, userID);
		ResultSet find_state1=find_state.executeQuery();
		find_state1.next();
		int state=find_state1.getInt(1);
		find_state1.close();
		find_state.close();	
		switch (state) { //change state
		case 0:
		{
			state=1;
		break;}
		
		case 1: //meal menu
			{if (decision.toLowerCase().equals("exit")) state=1;
			else if (decision.equals("1")) {
				
			PreparedStatement change_choice = connection.prepareStatement("UPDATE user_info SET choose_meal_time= ? where (user_id= ?);");
			change_choice.setString(1, "breakfast");
			change_choice.setString(2, userID);
			change_choice.executeUpdate();
			change_choice.close();		
			state=11;}
			
			else if (decision.equals("2"))  {
				
			PreparedStatement change_choice = connection.prepareStatement("UPDATE user_info SET choose_meal_time= ? where (user_id= ?);");
			change_choice.setString(1, "lunch");
			change_choice.setString(2, userID);
			change_choice.executeUpdate();
			change_choice.close();		
			state=11;}
			else if (decision.equals("3"))  {
				
			PreparedStatement change_choice = connection.prepareStatement("UPDATE user_info SET choose_meal_time= ? where (user_id= ?);");
			change_choice.setString(1, "dinner");
			change_choice.setString(2, userID);			
			change_choice.executeUpdate();
			change_choice.close();		
			state=11;}
			else if (decision.equals("4"))  {
				
			PreparedStatement change_choice = connection.prepareStatement("UPDATE user_info SET choose_meal_time= ? where (user_id= ?);");
			change_choice.setString(1, "dessert");
			change_choice.setString(2, userID);
			change_choice.executeUpdate();
			change_choice.close();		
			state=12;}
		break;}
		
		case 11:
			{if (decision.toLowerCase().equals("exit")) state=1;
			else if (decision.equals("1"))  {
			PreparedStatement change_choice = connection.prepareStatement("UPDATE user_info SET choose_type= ? where (user_id= ?);");
			change_choice.setString(1, "vegetarian");
			change_choice.setString(2, userID);
			change_choice.executeUpdate();
			change_choice.close();		
			state=111;}
			
			else if (decision.equals("2")) {
				
			PreparedStatement change_choice = connection.prepareStatement("UPDATE user_info SET choose_type= ? where (user_id= ?);");
			change_choice.setString(1, "chicken");
			change_choice.setString(2, userID);
			change_choice.executeUpdate();
			change_choice.close();		
			state=111;}
			else if (decision.equals("3"))  {
				
			PreparedStatement change_choice = connection.prepareStatement("UPDATE user_info SET choose_type= ? where (user_id= ?);");
			change_choice.setString(1, "pork");
			change_choice.setString(2, userID);
			change_choice.executeUpdate();
			change_choice.close();		
			state=111;}
			
			else if (decision.equals("4")) {
				
			PreparedStatement change_choice = connection.prepareStatement("UPDATE user_info SET choose_type= ? where (user_id= ?);");
			change_choice.setString(1, "beef");
			change_choice.setString(2, userID);
			change_choice.executeUpdate();
			change_choice.close();		
			state=111;}
			
			else if (decision.equals("5")) {
				
			PreparedStatement change_choice = connection.prepareStatement("UPDATE user_info SET choose_type= ? where (user_id= ?);");
			change_choice.setString(1, "nothing");
			change_choice.setString(2, userID);
			change_choice.executeUpdate();
			change_choice.close();		
			state=111;}
			
			break;	}
			
		case 12:
			{if (decision.toLowerCase().equals("exit")) state=1;
			else if (decision.equals("1"))  {
				PreparedStatement change_choice = connection.prepareStatement("UPDATE user_info SET choose_type= ? where (user_id= ?);");
				change_choice.setString(1, "vegetarian");
				change_choice.setString(2, userID);
				change_choice.executeUpdate();
				change_choice.close();		
				state=112;}
				
			else if (decision.equals("2")) {
				PreparedStatement change_choice = connection.prepareStatement("UPDATE user_info SET choose_type= ? where (user_id= ?);");
				change_choice.setString(1, "nothing");
				change_choice.setString(2, userID);
				change_choice.executeUpdate();
				change_choice.close();		
				state=112;}
			break;
			}
			
		case 111: //choose dishes function	
			{if (decision.toLowerCase().equals("exit")) state=1;
			break;}
		case 112: //choose dessert function
			{if (decision.toLowerCase().equals("exit")) state=1;
			break;}
			
		default:{
			if (decision.toLowerCase().equals("exit")) state=1;
			break;
		}
		}	
		//update state to user_info
		String change_state_statement="UPDATE user_info SET state="+Integer.toString(state)+" where user_id= '"+userID+"';";
		PreparedStatement change_state = connection.prepareStatement(change_state_statement);
		change_state.executeUpdate();
		change_state.close();	
		String print_message="";		
		switch (state) { //ouput message
        //features menu
		case 1: //meal menu, feature 1,4,8,9,10
		{print_message= "Meal menu"
				+ "\n\n1.Breakfast \n2.Lunch \n3.Dinner \n4.Dessert"; break;}
		
		case 11:{print_message= "What type of food do you like to choose?\n\n1.Vegetarian\n2.Chicken\n3.Pork\n4.Beef\n5.Don't care";	break;}	
		case 12: {print_message= "Are you vegetarian?\n\n1.Yes\n2.No"; break;}
			
		case 111:{ //print dishes
			PreparedStatement get_users_final_choice = connection.prepareStatement("SELECT * FROM user_info where (user_id= ?);");
			get_users_final_choice.setString(1, userID);


			ResultSet get_users_final_choice1=get_users_final_choice.executeQuery();

			if (get_users_final_choice1.next()){
			String users_final_time=get_users_final_choice1.getString(15);		
			String users_final_type=get_users_final_choice1.getString(16);

			get_users_final_choice1.close();
			get_users_final_choice.close();
			String statement="";
			List<Integer> price = new ArrayList<Integer>();
			List<String> menu_name = new ArrayList<String>();
			
			PreparedStatement  get_dishes=null;
			if (users_final_type.equals("nothing")){
				
				get_dishes = connection.prepareStatement("SELECT * FROM meal_menu where (meal_time= ? ) ;");
				get_dishes.setString(1,users_final_time);
				//statement="SELECT * FROM meal_menu where ((choose_meal_time='"+users_final_time+"') and (username='test'));";
			}
			
			else {
				get_dishes = connection.prepareStatement("SELECT * FROM meal_menu where ((meal_time= ? ) and (type= ? ));");
				get_dishes.setString(1,users_final_time);
				get_dishes.setString(2,users_final_type);
				//statement="SELECT * FROM meal_menu where ((choose_meal_time='"+users_final_time+"') and (choose_type='"+users_final_type+"') and (username='test'));";
			}

			
	//		PreparedStatement get_dishes = connection.prepareStatement(statement);
			ResultSet get_dishes1=get_dishes.executeQuery();
			int count_dishes=0;
			
			
//			System.out.println("HELLO");
			while (get_dishes1.next()){
				price.add(get_dishes1.getInt(3));
				menu_name.add(get_dishes1.getString(1));				
//				print_message=print_message+count_dishes+"."+get_dishes1.getString(1)+" "+get_dishes1.getInt(3)+"\n";	
				count_dishes++;
			}
			
			
			int second_choice_index=0;
			int third_choice_index=0;
			int first_choice_index=new Random().nextInt(count_dishes);
			System.out.println(first_choice_index);

			while (true){
				second_choice_index=new Random().nextInt(count_dishes);
				System.out.println(second_choice_index);

				if (second_choice_index!=first_choice_index)
					break;	
			}
			System.out.println(second_choice_index);

			while (true){
				third_choice_index=new Random().nextInt(count_dishes);
				System.out.println(third_choice_index);
				if ((third_choice_index!=first_choice_index) && third_choice_index!=second_choice_index)
					break;	
			}
			System.out.println(third_choice_index);
			
			print_message="1."+menu_name.get(first_choice_index)+" "+price.get(first_choice_index)+"\n";
			print_message=print_message+"2."+menu_name.get(second_choice_index)+" "+price.get(second_choice_index)+"\n";
			print_message=print_message+"3."+menu_name.get(third_choice_index)+" "+price.get(third_choice_index)+"\n";
			
			
			break;
		}
		break;
		} 
		case 112: { //print dishes
			PreparedStatement get_users_final_choice = connection.prepareStatement("SELECT * FROM user_info where (user_id= ?);");
			get_users_final_choice.setString(1, userID);


			ResultSet get_users_final_choice1=get_users_final_choice.executeQuery();

			if (get_users_final_choice1.next()){
			String users_final_time=get_users_final_choice1.getString(15);		
			String users_final_type=get_users_final_choice1.getString(16);

			get_users_final_choice1.close();
			get_users_final_choice.close();
			String statement="";
			List<Integer> price = new ArrayList<Integer>();
			List<String> menu_name = new ArrayList<String>();
			

			if (users_final_type.equals("nothing")){
				
				statement="SELECT * FROM meal_menu where ((meal_time='dessert'));";			}
			
			else {
				statement="SELECT * FROM meal_menu where ((meal_time='dessert') and (type='vegetarian'));";	
			}

			
			PreparedStatement get_dishes = connection.prepareStatement(statement);
			ResultSet get_dishes1=get_dishes.executeQuery();
			int count_dishes=0;
			
			
//			System.out.println("HELLO");
			while (get_dishes1.next()){
				price.add(get_dishes1.getInt(3));
				menu_name.add(get_dishes1.getString(1));				
//				print_message=print_message+count_dishes+"."+get_dishes1.getString(1)+" "+get_dishes1.getInt(3)+"\n";	
				count_dishes++;
			}
			
			
			int second_choice_index=0;
			int third_choice_index=0;
			int first_choice_index=new Random().nextInt(count_dishes);
			System.out.println(first_choice_index);

			while (true){
				second_choice_index=new Random().nextInt(count_dishes);
				System.out.println(second_choice_index);

				if (second_choice_index!=first_choice_index)
					break;	
			}
			System.out.println(second_choice_index);

			while (true){
				third_choice_index=new Random().nextInt(count_dishes);
				System.out.println(third_choice_index);
				if ((third_choice_index!=first_choice_index) && third_choice_index!=second_choice_index)
					break;	
			}
			System.out.println(third_choice_index);
			
			print_message="1."+menu_name.get(first_choice_index)+" "+price.get(first_choice_index)+"\n";
			print_message=print_message+"2."+menu_name.get(second_choice_index)+" "+price.get(second_choice_index)+"\n";
			print_message=print_message+"3."+menu_name.get(third_choice_index)+" "+price.get(third_choice_index)+"\n";
			
			
			break;
		}
		break;
		}
		default:
			break;
		}	
		connection.close();
		return print_message;
		}catch(Exception e){
			System.out.println(e);
		}	
		return null;
	}
	
	
	private Connection getConnection() throws URISyntaxException, SQLException {
		Connection connection;
		URI dbUri = new URI(System.getenv("DATABASE_URL"));

		String username = dbUri.getUserInfo().split(":")[0];
		String password = dbUri.getUserInfo().split(":")[1];
		String dbUrl = "jdbc:postgresql://" + dbUri.getHost() + ':' + dbUri.getPort() + dbUri.getPath() +  "?ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory";

		//log.info("Username: {} Password: {}", username, password);
		//log.info ("dbUrl: {}", dbUrl);
		
		connection = DriverManager.getConnection(dbUrl, username, password);

		return connection;
	}

}
